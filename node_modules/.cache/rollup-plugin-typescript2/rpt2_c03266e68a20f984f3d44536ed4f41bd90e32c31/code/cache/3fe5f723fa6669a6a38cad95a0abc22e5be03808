{"code":"import { TrackerConfig, } from \"../types/index\";\nimport { createHistoryEvent } from \"../utils/pv\";\n/// 点击 双击 右击 按下 释放 进入元素 移出元素或其子元素 移入某元素或其子元素\nconst MouseEventList = [\n    \"click\",\n    \"dblclick\",\n    \"contextmenu\",\n    \"mousedown\",\n    \"mouseup\",\n    \"mouseenter\",\n    \"mouseout\",\n    \"mouseover\",\n];\nexport default class Tracker {\n    constructor(options) {\n        this.data = Object.assign(this.initDef(), options);\n        this.installTracker();\n    }\n    initDef() {\n        window.history[\"pushState\"] = createHistoryEvent(\"pushState\");\n        window.history[\"replaceState\"] = createHistoryEvent(\"replaceState\");\n        return {\n            sdkVersion: TrackerConfig.version,\n            historyTracker: false,\n            hashTracker: false,\n            domTracker: false,\n            jsError: false,\n        };\n    }\n    //获取用户id 没有登录通过 uuid库生成唯一id，如果登录了使用后台返回的userid\n    setUerId(uuid) {\n        this.data.uuid = uuid;\n    }\n    //用户自定义的一些参数\n    setExtra(extra) {\n        this.data.extra = extra;\n    }\n    //手动上报\n    sendTracker(data) {\n        this.reportTracker(data);\n    }\n    //dom 点击上报\n    targetKeyReport() {\n        MouseEventList.forEach((event) => {\n            window.addEventListener(event, (e) => {\n                //此处类型推断是错误的，需要进行类型断言为 HTMLElement\n                const target = e.target;\n                const targetValue = target.getAttribute(\"target-key\");\n                if (targetValue) {\n                    this.sendTracker({\n                        targetKey: targetValue,\n                        event,\n                    });\n                }\n            });\n        });\n    }\n    // js错误上报\n    jsError() {\n        this.errorEvent();\n        this.promiseReject();\n    }\n    //捕获js报错\n    errorEvent() {\n        window.addEventListener('error', (e) => {\n            this.sendTracker({\n                targetKey: 'message',\n                event: 'error',\n                message: e.message\n            });\n        });\n    }\n    //捕获promise 错误\n    promiseReject() {\n        window.addEventListener('unhandledrejection', (event) => {\n            event.promise.catch(error => {\n                this.sendTracker({\n                    targetKey: \"reject\",\n                    event: \"promise\",\n                    message: error\n                });\n            });\n        });\n    }\n    //PageView事件监听\n    captureEvents(eventList, targetKey, data) {\n        eventList.forEach((event) => {\n            window.addEventListener(event, () => {\n                this.reportTracker({ event, targetKey, data });\n            });\n        });\n    }\n    //根据用户的参数来判断是否监听history和hash\n    installTracker() {\n        if (this.data.historyTracker) {\n            this.captureEvents([\"pushState\", \"replaceState\", \"popstate\"], \"history-pv\");\n        }\n        if (this.data.hashTracker) {\n            this.captureEvents([\"hashchange\"], \"history-pv\");\n        }\n        if (this.data.domTracker) {\n            this.targetKeyReport();\n        }\n        // if (this.data.jsError) {\n        //     this.jsError()\n        // }\n    }\n    //使用navigator.sendBeacon上报， 跟 XMLHttrequest 对比  navigator.sendBeacon 即使页面关闭了 也会完成请求 而XMLHTTPRequest 不一定\n    //navigator.sendBeacon第二参数的格式不能是object对象，可以是字符串、blob对象等\n    reportTracker(data) {\n        const params = Object.assign(this.data, data, {\n            time: new Date().getTime(),\n        });\n        // 将请求头设为键值对的形式\n        let headers = {\n            type: \"application/x-www-form-urlencoded\",\n        };\n        let blob = new Blob([JSON.stringify(params)], headers);\n        navigator.sendBeacon(this.data.requestUrl, blob);\n    }\n}\n","references":["E:/面试项目/data-tracker/src/types/index.ts","E:/面试项目/data-tracker/src/utils/pv.ts"]}
